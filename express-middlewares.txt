
// Express JS framework:


// Install and learn postman tool

// Install and learn git and github account

// Learn Node JS inbuilt module: path

// absolute vs relative path

// Learn static files serving

// Express JS Middlewares -- body-parser, express.static(), router, 


-------------------------------------------------------------------------------------------------------------------------------------



//node JS in-built module: 

The Path module in Node.js is a built-in module that provides utilities for working with file and directory paths.
 It helps manipulate and resolve file system paths in a platform-independent way, meaning it works seamlessly across different operating systems.

Commonly Used Methods in the Path Module:
path.basename(path): Returns the last portion of the path (e.g., file name).

path.dirname(path): Returns the directory part of the path.

path.extname(path): Returns the file extension (e.g., .js, .txt).

path.join([...paths]): Joins multiple segments of a path into a single path.

path.resolve([...paths]): Resolves a sequence of paths into an absolute path.

path.isAbsolute(path): Checks if the given path is an absolute path.

path.normalize(path): Normalizes a path, resolving .., . and slashes.

path.parse(path): Returns an object with path details (root, directory, base, name, extension).

path.format(obj): Converts a path object (from path.parse()) back into a string.








Example Usage:
javascript
const path = require('path');

// Get file name
console.log(path.basename('/user/docs/file.txt')); // Output: file.txt

// Join paths
console.log(path.join('/user', 'docs', 'file.txt')); // Output: /user/docs/file.txt

// Resolve absolute path
console.log(path.resolve('file.txt')); // Output: Absolute path to file.txt

// Parse path details
console.log(path.parse('/user/docs/file.txt'));
// Output: { root: '/', dir: '/user/docs', base: 'file.txt', ext: '.txt', name:


--------------------------------------------------------------------------------------------------------------------------------------



//Express JS native modules: ------------------------------------------------------------------------------------------

Basic Setup

express() - Core framework setup and application creation.

app.listen() - Starts the server.



Routing and Requests

app.get(), app.post(), app.put(), app.delete(), etc. - Handling different HTTP methods.

req and res objects - Accessing request data and sending responses.



Middleware

app.use() - Integrating middleware.

Built-in middleware like express.json() and express.urlencoded().



Static Files

express.static() - Serving static assets (CSS, JavaScript, images, etc.).



Error Handling

Error-handling middleware (app.use((err, req, res, next) => {...})).



Template Engines

Integration with view engines like EJS, Pug, or Handlebars for server-side rendering.



Routing Modules

express.Router() - Modular and organized routing.



Built-in Methods

res.send(), res.json(), res.redirect(), etc. - Sending responses.

req.params, req.query, req.body, etc. - Accessing request data.




Handling Files

File uploads using middleware like multer (though not native, it's frequently used).



Other Advanced Features

Handling cookies (req.cookies, res.cookie()).

Session management (often paired with external libraries like express-session).




-------------------------------------------------------------------------------------------------------------------------


//Intermediate level modules:


Request Methods and Hooks

Middleware hooks like app.all(), app.route(), and handling wildcard routes.


HTTP Methods

Working with custom headers using req.get() and res.set().

Using methods like res.status() to control HTTP status codes.



Event Handling

Using req.on() and res.on() for low-level event handling, like tracking request data.



Streaming

Handling file downloads or large data streams with res.download() and res.sendFile().



Custom Middleware

Creating reusable middleware for cross-cutting concerns like logging or validation:

javascript
app.use((req, res, next) => {
  console.log(`${req.method} ${req.url}`);
  next();
});



API Versioning

Organizing routes by API versions using express.Router() and middleware.




Security

Implementing security practices like sanitizing user input.

Using HTTPS in your Express app.




Scaling

Clustering your Express app for handling concurrent requests in high-traffic environments.



Real-time Communication

Integrating WebSockets (via libraries like Socket.io) for real-time data updates.



Internationalization (i18n)

Setting up multilingual support for your app.


-------------------------------------------------------------------------------------------------------------------------


//learn git and github:

Git and GitHub in Short:

Git: A distributed version control system to track changes in code and collaborate with others efficiently.

GitHub: A cloud-based platform for hosting and managing Git repositories, enabling collaboration and sharing.


Commonly Used Git Commands:

git init: Initializes a new Git repository in the current directory.

git clone [url]: Copies an existing repository from a remote source like GitHub.

git add [file/folder]: Stages changes to be committed.

git commit -m "[message]": Saves staged changes with a descriptive message.

git status: Shows the current status of changes in your working directory.

git log: Displays the commit history of the repository.

git pull: Fetches and merges changes from the remote repository.

git push: Pushes local commits to the remote repository.

git branch [branch_name]: Creates a new branch.

git checkout [branch_name]: Switches to a specified branch.

git merge [branch_name]: Merges changes from another branch into the current branch.

git reset [file]: Unstages a file while keeping the changes.

git diff: Shows the differences between your files and the last commit.

git rm [file]: Removes a file from the working directory and staging area.





//Process to upload the project on GitHub:



////////////// add a project from VS Code to GitHub: ///////////////////////////////////////////////////////////////////



Initialize the Git Repository:

bash
git init
Initializes a new Git repository in your project folder.



Add All Files to Staging:

bash
git add .
Stages all the files in your project.



Commit Changes:

bash
git commit -m "Initial commit"
Saves the changes with a message.



Connect to a Remote GitHub Repository:

bash
git remote add origin [repository_url]
Links your local Git repository to a remote GitHub repository. Replace [repository_url] with your GitHub repository URL.



Push the Project to GitHub:

bash
git push -u origin master
Uploads your project to GitHub. You may need to authenticate with GitHub if prompted.




-------------------------------------------------------------------------------------------------------------------------



//Install Postman tool:

What is Postman?
Postman is a user-friendly tool designed for testing and interacting with APIs (Application Programming Interfaces). It allows developers to send HTTP requests (like GET, POST, PUT, DELETE) to servers and view their responses. Think of it as a virtual assistant for API development, making it easier to debug, test, and document APIs without writing code.

Common cURL Commands for Postman and Command Line:
Here are some basic cURL commands you can use in Postman or directly in the command line:

GET Request:

bash
curl -X GET "https://api.example.com/resource"
POST Request with JSON Data:

bash
curl -X POST "https://api.example.com/resource" \
-H "Content-Type: application/json" \
-d '{"key":"value"}'
PUT Request:

bash
curl -X PUT "https://api.example.com/resource/1" \
-H "Content-Type: application/json" \
-d '{"key":"updatedValue"}'
DELETE Request:

bash
curl -X DELETE "https://api.example.com/resource/1"
Adding Headers:

bash
curl -X GET "https://api.example.com/resource" \
-H "Authorization: Bearer YOUR_TOKEN"
Form Data Submission:

bash
curl -X POST "https://api.example.com/resource" \
-F "field1=value1" \
-F "field2=value2"
Download a File:

bash
curl -O "https://api.example.com/file.zip"


-------------------------------------------------------------------------------------------------------------------------





//Static File Surveying:

Static File Serving:
Static file serving in Express.js involves delivering assets like HTML, CSS, JavaScript, and images directly to the client. The express.static() middleware is used for this purpose. Here's a quick setup:

javascript
const express = require('express');
const app = express();
app.use(express.static('public')); // Serves static files from the "public" directory
app.listen(3000, () => console.log('Server is running on http://localhost:3000'));
Best Practices for Serving Static Files:

Organize files: Use a folder like public/ for all static assets.

Enable caching: Use HTTP headers to cache files for faster loading.

Minify and bundle: Reduce file size and combine assets to minimize HTTP requests.

Use HTTPS: Serve files securely.

Handle errors: Gracefully manage missing file requests.

Compress files: Use middleware like compression to reduce file size.






-------------------------------------------------------------------------------------------------------------------------






//Express Middleware

-- Express middleware functions are functions that execute during the lifecycle of an HTTP request to handle tasks like request parsing, authentication, logging, and error handling, enabling modular and reusable server-side logic. 


Here are some widely used examples of Express middleware:

Body-parser: Parses incoming request bodies in various formats (like JSON, URL-encoded data) and makes them available in req.body.

Cors: Enables Cross-Origin Resource Sharing (CORS) to manage access across different domains.

Morgan: Logs HTTP requests for debugging and monitoring purposes.

Helmet: Enhances security by setting various HTTP headers.

Cookie-parser: Parses cookies attached to the client request and makes them available in req.cookies.

Express-session: Handles user sessions by storing session data on the server.

Compression: Compresses HTTP responses to improve performance.

Error-handling middleware: Custom middleware to catch and handle errors in the app.




//body-parswer middleware:

The body-parser middleware is used in Express to parse incoming request bodies so they can be easily accessed and manipulated through the req.body object.
 It allows the server to handle different data formats like JSON and URL-encoded data. Here's a detailed explanation with syntax:

Key Features of Body-parser Middleware:
JSON Parsing: Converts incoming JSON-formatted request data into a JavaScript object.

URL-encoded Parsing: Parses data sent in the application/x-www-form-urlencoded format (commonly used with HTML forms).

Custom Configuration: You can configure its behavior using options like limits on data size.




-------------------------------------------------------------------------------------------------------------------------





Common Methods:
bodyParser.json()

Parses JSON-formatted data from incoming requests.

Useful for handling requests with Content-Type: application/json.

bodyParser.urlencoded()

Parses data encoded in the application/x-www-form-urlencoded format (typically used with HTML forms).

Options:

extended: true: Parses nested objects using the qs library.

extended: false: Parses simpler query strings using the querystring library.

bodyParser.raw()

Parses the body into a Buffer for requests with custom or non-standard data formats.

bodyParser.text()

Parses the body as a plain text string for text/plain-encoded requests.

Supported Formats:
JSON (application/json): Handles structured JSON data.

URL-encoded (application/x-www-form-urlencoded): Suitable for data sent from HTML forms.

Plain text (text/plain): For raw text data.

Raw binary data (application/octet-stream): Useful for file uploads or custom binary formats.



-------------------------------------------------------------------------------------------------------------------------


Installation
First, you need to install body-parser. Run the following command:

bash
npm install body-parser
Importing and Using Body-parser
You need to include body-parser in your Express application:

javascript
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

// Middleware to parse JSON data
app.use(bodyParser.json());

// Middleware to parse URL-encoded data
app.use(bodyParser.urlencoded({ extended: true }));

// Example route
app.post('/data', (req, res) => {
  console.log(req.body); // Access parsed data
  res.send('Data received!');
});

app.listen(3000, () => {
  console.log('Server running on port 3000');
});
Explanation of Syntax
bodyParser.json(): Parses JSON payloads. You can use this middleware if your application is dealing with APIs or requests that send JSON data.

bodyParser.urlencoded({ extended: true }): Parses URL-encoded data. The extended option determines whether nested objects can be parsed (true) or not (false).

Note: Starting with Express version 4.16.0, you don’t need to install the body-parser package separately, as Express has built-in middleware to parse JSON and URL-encoded bodies:

javascript
app.use(express.json());
app.use(express.urlencoded({ extended: true }));




